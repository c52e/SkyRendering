
layout(local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y) in;

layout(binding = 0, rg16) uniform image2D env_brdf_lut;

#include "BRDF.glsl"
#include "Noise.glsl"

// https://cdn2-unrealengine-1251447533.file.myqcloud.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf

vec2 IntegrateBRDF(float Roughness, float NoV) {
	const vec3 N = vec3(0.0, 0.0, 1.0);
	vec3 V;
	V.x = sqrt( 1.0 - NoV * NoV ); // sin
	V.y = 0.0;
	V.z = NoV; // cos

	float a = Roughness * Roughness;
	float A = 0.0;
	float B = 0.0;
	const uint NumSamples = 1024;
	
	for( uint i = 0; i < NumSamples; i++ ) {
		vec2 Xi = Hammersley( i, NumSamples, uvec2(0) );
		vec3 H = ImportanceSampleGGX( Xi, a );
		vec3 L = 2 * dot(V, H) * H - V;
		float NoL = clamp(L.z, 0, 1);
		float NoH = clamp(H.z, 0, 1);
		float VoH = clamp(dot(V, H), 0, 1);
		if (NoL > 0) {
			float Vis = Vis_SmithJointApprox(a, NoV, NoL);
			// Incident light = NoL
			// pdf = D * NoH / (4 * VoH)
			// NoL * Vis * D / pdf
			float NoL_Vis_PDF = NoL * Vis * (4 * VoH / NoH);
			float Fc = pow(1 - VoH, 5);
			A += (1 - Fc) * NoL_Vis_PDF;
			B += Fc * NoL_Vis_PDF;
		}
	}
	return vec2( A, B ) / float(NumSamples);
}

void main() {
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = (vec2(pos) + 0.5) / vec2(imageSize(env_brdf_lut));
	vec2 env_brdf = IntegrateBRDF(uv.y, uv.x);
	imageStore(env_brdf_lut, pos, vec4(env_brdf, 0, 0));
}
