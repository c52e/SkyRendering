#include "BRDF.glsl"
#include "Noise.glsl"

layout(local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = LOCAL_SIZE_Z) in;

layout(binding = 0) uniform samplerCube env_radiance_texture;
layout(binding = 0, rgba16f) uniform imageCube prefiltered_irradiance_image;

layout(location = 0) uniform float roughness;

// https://chetanjags.wordpress.com/2015/08/26/image-based-lighting/
vec3 PrefilterEnvMap( float Roughness , vec3 R ) {
    float a = Roughness * Roughness;
    vec3 N = R;
    vec3 V = R;
    vec3 PrefilteredColor = vec3(0);
    const float kNumSamplesMin = 1.0;
    const float kNumSamplesMax = 64.0;
    const uint NumSamples = uint(mix(kNumSamplesMin, kNumSamplesMax, pow(roughness, 0.3)));
    float TotalWeight = 0.0;
    for( uint i = 0; i < NumSamples; i++ ) {
        vec2 Xi = Hammersley( i, NumSamples, uvec2(0) );
        vec3 H = ImportanceSampleGGX( Xi, a , N );
        vec3 L = 2 * dot( V, H ) * H - V;
        float NoL = clamp( dot( N, L ), 0, 1 );
        if( NoL > 0 ) {
            float NoH =  clamp( dot( N, H ), 0 ,1 ) ;
            float HoV = clamp( dot( H, V ), 0, 1 ) ;
            float D = D_GGX(a, NoH);
            float pdf = max(D * NoH / (4.0 * HoV), 0.0001);

            float invSaTexel = (6.0 * imageSize(prefiltered_irradiance_image).x * imageSize(prefiltered_irradiance_image).y) / (4.0 * PI);
            float saSample = 1.0 / max(NumSamples * pdf, 0.00001);
             
            float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2( saSample * invSaTexel ) + 2.5  ;

            PrefilteredColor += textureLod( env_radiance_texture , L, mipLevel ).rgb * NoL;
            TotalWeight += NoL;
        }
    }
    return PrefilteredColor / TotalWeight;
}

void main() {
    int index = int(gl_GlobalInvocationID.z);
    vec2 face_uv = (vec2(gl_GlobalInvocationID.xy) + vec2(0.5)) / vec2(imageSize(prefiltered_irradiance_image));
    face_uv.y = 1.0 - face_uv.y;
    vec3 dir = ConvertCubUvToDir(index, face_uv);
    vec3 filtered_radiance = PrefilterEnvMap(roughness, dir);
    imageStore(prefiltered_irradiance_image, ivec3(gl_GlobalInvocationID.xyz), vec4(filtered_radiance, 0.0));
}